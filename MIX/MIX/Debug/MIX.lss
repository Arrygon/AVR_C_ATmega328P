
MIX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000767  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b1  00000000  00000000  00000bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ea  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b3  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001df  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001bd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile double dutyCycle= 0;

int main(void){
	
	DDRD |= _BV(6) | _BV(5) | _BV(4);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 67       	ori	r24, 0x70	; 112
  94:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01);
  96:	84 b5       	in	r24, 0x24	; 36
  98:	83 68       	ori	r24, 0x83	; 131
  9a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01);
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= _BV(TOIE0);
  a2:	ee e6       	ldi	r30, 0x6E	; 110
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
	
	//setADCup();
	ADMUX |= _BV(REFS0) | _BV(MUX0);
  ac:	ec e7       	ldi	r30, 0x7C	; 124
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	81 64       	ori	r24, 0x41	; 65
  b4:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2) | _BV(ADSC);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8f 6c       	ori	r24, 0xCF	; 207
  be:	80 83       	st	Z, r24
	DIDR0 = (1 << ADC1D);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	TCCR1B |= _BV(CS12) | _BV(WGM12);
  c6:	e1 e8       	ldi	r30, 0x81	; 129
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8c 60       	ori	r24, 0x0C	; 12
  ce:	80 83       	st	Z, r24
	OCR1A = 31250;
  d0:	82 e1       	ldi	r24, 0x12	; 18
  d2:	9a e7       	ldi	r25, 0x7A	; 122
  d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |= _BV(OCIE1A);
  dc:	ef e6       	ldi	r30, 0x6F	; 111
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	
	sei();
  e6:	78 94       	sei
	
	
	
	while (1){
		PORTD ^= _BV(5);
  e8:	90 e2       	ldi	r25, 0x20	; 32
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	89 27       	eor	r24, r25
  ee:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	31 ee       	ldi	r19, 0xE1	; 225
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x66>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x70>
 100:	00 00       	nop
 102:	f3 cf       	rjmp	.-26     	; 0xea <main+0x5a>

00000104 <__vector_16>:
//	ADMUX |= _BV(REFS0) | _BV(MUX0);
//	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2) | _BV(ADSC);
//	DIDR0 = (1 << ADC1D);
//}
// ????????FUNCTION DOESN'T WORK ???????
ISR(TIMER0_OVF_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	OCR0A = dutyCycle;
 126:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 12a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 12e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 132:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 136:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__fixunssfsi>
 13a:	67 bd       	out	0x27, r22	; 39
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_21>:
ISR(ADC_vect){
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	dutyCycle = ADC / 4;
 180:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 184:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 188:	76 95       	lsr	r23
 18a:	67 95       	ror	r22
 18c:	76 95       	lsr	r23
 18e:	67 95       	ror	r22
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 2b 01 	call	0x256	; 0x256 <__floatunsisf>
 198:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 19c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 1a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 1a4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
	ADCSRA |= _BV(ADSC);
 1a8:	ea e7       	ldi	r30, 0x7A	; 122
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	80 83       	st	Z, r24
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_11>:
ISR(TIMER1_COMPA_vect){
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
	PORTD ^= _BV(4);
 1e2:	9b b1       	in	r25, 0x0b	; 11
 1e4:	80 e1       	ldi	r24, 0x10	; 16
 1e6:	89 27       	eor	r24, r25
 1e8:	8b b9       	out	0x0b, r24	; 11
}
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__fixunssfsi>:
 1f8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fp_splitA>
 1fc:	88 f0       	brcs	.+34     	; 0x220 <__fixunssfsi+0x28>
 1fe:	9f 57       	subi	r25, 0x7F	; 127
 200:	98 f0       	brcs	.+38     	; 0x228 <__fixunssfsi+0x30>
 202:	b9 2f       	mov	r27, r25
 204:	99 27       	eor	r25, r25
 206:	b7 51       	subi	r27, 0x17	; 23
 208:	b0 f0       	brcs	.+44     	; 0x236 <__fixunssfsi+0x3e>
 20a:	e1 f0       	breq	.+56     	; 0x244 <__fixunssfsi+0x4c>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	88 1f       	adc	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	1a f0       	brmi	.+6      	; 0x21c <__fixunssfsi+0x24>
 216:	ba 95       	dec	r27
 218:	c9 f7       	brne	.-14     	; 0x20c <__fixunssfsi+0x14>
 21a:	14 c0       	rjmp	.+40     	; 0x244 <__fixunssfsi+0x4c>
 21c:	b1 30       	cpi	r27, 0x01	; 1
 21e:	91 f0       	breq	.+36     	; 0x244 <__fixunssfsi+0x4c>
 220:	0e 94 8a 01 	call	0x314	; 0x314 <__fp_zero>
 224:	b1 e0       	ldi	r27, 0x01	; 1
 226:	08 95       	ret
 228:	0c 94 8a 01 	jmp	0x314	; 0x314 <__fp_zero>
 22c:	67 2f       	mov	r22, r23
 22e:	78 2f       	mov	r23, r24
 230:	88 27       	eor	r24, r24
 232:	b8 5f       	subi	r27, 0xF8	; 248
 234:	39 f0       	breq	.+14     	; 0x244 <__fixunssfsi+0x4c>
 236:	b9 3f       	cpi	r27, 0xF9	; 249
 238:	cc f3       	brlt	.-14     	; 0x22c <__fixunssfsi+0x34>
 23a:	86 95       	lsr	r24
 23c:	77 95       	ror	r23
 23e:	67 95       	ror	r22
 240:	b3 95       	inc	r27
 242:	d9 f7       	brne	.-10     	; 0x23a <__fixunssfsi+0x42>
 244:	3e f4       	brtc	.+14     	; 0x254 <__fixunssfsi+0x5c>
 246:	90 95       	com	r25
 248:	80 95       	com	r24
 24a:	70 95       	com	r23
 24c:	61 95       	neg	r22
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	8f 4f       	sbci	r24, 0xFF	; 255
 252:	9f 4f       	sbci	r25, 0xFF	; 255
 254:	08 95       	ret

00000256 <__floatunsisf>:
 256:	e8 94       	clt
 258:	09 c0       	rjmp	.+18     	; 0x26c <__floatsisf+0x12>

0000025a <__floatsisf>:
 25a:	97 fb       	bst	r25, 7
 25c:	3e f4       	brtc	.+14     	; 0x26c <__floatsisf+0x12>
 25e:	90 95       	com	r25
 260:	80 95       	com	r24
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	8f 4f       	sbci	r24, 0xFF	; 255
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	99 23       	and	r25, r25
 26e:	a9 f0       	breq	.+42     	; 0x29a <__floatsisf+0x40>
 270:	f9 2f       	mov	r31, r25
 272:	96 e9       	ldi	r25, 0x96	; 150
 274:	bb 27       	eor	r27, r27
 276:	93 95       	inc	r25
 278:	f6 95       	lsr	r31
 27a:	87 95       	ror	r24
 27c:	77 95       	ror	r23
 27e:	67 95       	ror	r22
 280:	b7 95       	ror	r27
 282:	f1 11       	cpse	r31, r1
 284:	f8 cf       	rjmp	.-16     	; 0x276 <__floatsisf+0x1c>
 286:	fa f4       	brpl	.+62     	; 0x2c6 <__floatsisf+0x6c>
 288:	bb 0f       	add	r27, r27
 28a:	11 f4       	brne	.+4      	; 0x290 <__floatsisf+0x36>
 28c:	60 ff       	sbrs	r22, 0
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <__floatsisf+0x6c>
 290:	6f 5f       	subi	r22, 0xFF	; 255
 292:	7f 4f       	sbci	r23, 0xFF	; 255
 294:	8f 4f       	sbci	r24, 0xFF	; 255
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	16 c0       	rjmp	.+44     	; 0x2c6 <__floatsisf+0x6c>
 29a:	88 23       	and	r24, r24
 29c:	11 f0       	breq	.+4      	; 0x2a2 <__floatsisf+0x48>
 29e:	96 e9       	ldi	r25, 0x96	; 150
 2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <__floatsisf+0x6a>
 2a2:	77 23       	and	r23, r23
 2a4:	21 f0       	breq	.+8      	; 0x2ae <__floatsisf+0x54>
 2a6:	9e e8       	ldi	r25, 0x8E	; 142
 2a8:	87 2f       	mov	r24, r23
 2aa:	76 2f       	mov	r23, r22
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <__floatsisf+0x5e>
 2ae:	66 23       	and	r22, r22
 2b0:	71 f0       	breq	.+28     	; 0x2ce <__floatsisf+0x74>
 2b2:	96 e8       	ldi	r25, 0x86	; 134
 2b4:	86 2f       	mov	r24, r22
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	2a f0       	brmi	.+10     	; 0x2c6 <__floatsisf+0x6c>
 2bc:	9a 95       	dec	r25
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	88 1f       	adc	r24, r24
 2c4:	da f7       	brpl	.-10     	; 0x2bc <__floatsisf+0x62>
 2c6:	88 0f       	add	r24, r24
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	97 f9       	bld	r25, 7
 2ce:	08 95       	ret

000002d0 <__fp_split3>:
 2d0:	57 fd       	sbrc	r21, 7
 2d2:	90 58       	subi	r25, 0x80	; 128
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	59 f0       	breq	.+22     	; 0x2f0 <__fp_splitA+0x10>
 2da:	5f 3f       	cpi	r21, 0xFF	; 255
 2dc:	71 f0       	breq	.+28     	; 0x2fa <__fp_splitA+0x1a>
 2de:	47 95       	ror	r20

000002e0 <__fp_splitA>:
 2e0:	88 0f       	add	r24, r24
 2e2:	97 fb       	bst	r25, 7
 2e4:	99 1f       	adc	r25, r25
 2e6:	61 f0       	breq	.+24     	; 0x300 <__fp_splitA+0x20>
 2e8:	9f 3f       	cpi	r25, 0xFF	; 255
 2ea:	79 f0       	breq	.+30     	; 0x30a <__fp_splitA+0x2a>
 2ec:	87 95       	ror	r24
 2ee:	08 95       	ret
 2f0:	12 16       	cp	r1, r18
 2f2:	13 06       	cpc	r1, r19
 2f4:	14 06       	cpc	r1, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	f2 cf       	rjmp	.-28     	; 0x2de <__fp_split3+0xe>
 2fa:	46 95       	lsr	r20
 2fc:	f1 df       	rcall	.-30     	; 0x2e0 <__fp_splitA>
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <__fp_splitA+0x30>
 300:	16 16       	cp	r1, r22
 302:	17 06       	cpc	r1, r23
 304:	18 06       	cpc	r1, r24
 306:	99 1f       	adc	r25, r25
 308:	f1 cf       	rjmp	.-30     	; 0x2ec <__fp_splitA+0xc>
 30a:	86 95       	lsr	r24
 30c:	71 05       	cpc	r23, r1
 30e:	61 05       	cpc	r22, r1
 310:	08 94       	sec
 312:	08 95       	ret

00000314 <__fp_zero>:
 314:	e8 94       	clt

00000316 <__fp_szero>:
 316:	bb 27       	eor	r27, r27
 318:	66 27       	eor	r22, r22
 31a:	77 27       	eor	r23, r23
 31c:	cb 01       	movw	r24, r22
 31e:	97 f9       	bld	r25, 7
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
