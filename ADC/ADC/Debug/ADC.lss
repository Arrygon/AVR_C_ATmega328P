
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d1  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  00000aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000238  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  0000130c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000363  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile double dutyCycle= 0;

int main(void){
	
	DDRD |= _BV(6);
  90:	56 9a       	sbi	0x0a, 6	; 10
	
	TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01);
  92:	84 b5       	in	r24, 0x24	; 36
  94:	83 68       	ori	r24, 0x83	; 131
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01);
  98:	85 b5       	in	r24, 0x25	; 37
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= _BV(TOIE0);
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
	
	//setADCup();
	ADMUX |= _BV(REFS0) | _BV(MUX0);
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	81 64       	ori	r24, 0x41	; 65
  b0:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2) | _BV(ADSC);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 6c       	ori	r24, 0xCF	; 207
  ba:	80 83       	st	Z, r24
	DIDR0 = (1 << ADC1D);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	sei();
  c2:	78 94       	sei
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x34>

000000c6 <__vector_16>:
//	ADMUX |= _BV(REFS0) | _BV(MUX0);
//	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2) | _BV(ADSC);
//	DIDR0 = (1 << ADC1D);
//}
// ????????FUNCTION DOESN'T WORK ???????
ISR(TIMER0_OVF_vect){
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	OCR0A = dutyCycle;
  e8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
  ec:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
  f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
  f8:	0e 94 cb 00 	call	0x196	; 0x196 <__fixunssfsi>
  fc:	67 bd       	out	0x27, r22	; 39
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
 10e:	5f 91       	pop	r21
 110:	4f 91       	pop	r20
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_21>:
ISR(ADC_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	dutyCycle = ADC / 4;
 142:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 146:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 14a:	76 95       	lsr	r23
 14c:	67 95       	ror	r22
 14e:	76 95       	lsr	r23
 150:	67 95       	ror	r22
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__floatunsisf>
 15a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 15e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 162:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 166:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
	ADCSRA |= _BV(ADSC);
 16a:	ea e7       	ldi	r30, 0x7A	; 122
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__fixunssfsi>:
 196:	0e 94 3f 01 	call	0x27e	; 0x27e <__fp_splitA>
 19a:	88 f0       	brcs	.+34     	; 0x1be <__fixunssfsi+0x28>
 19c:	9f 57       	subi	r25, 0x7F	; 127
 19e:	98 f0       	brcs	.+38     	; 0x1c6 <__fixunssfsi+0x30>
 1a0:	b9 2f       	mov	r27, r25
 1a2:	99 27       	eor	r25, r25
 1a4:	b7 51       	subi	r27, 0x17	; 23
 1a6:	b0 f0       	brcs	.+44     	; 0x1d4 <__fixunssfsi+0x3e>
 1a8:	e1 f0       	breq	.+56     	; 0x1e2 <__fixunssfsi+0x4c>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	88 1f       	adc	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	1a f0       	brmi	.+6      	; 0x1ba <__fixunssfsi+0x24>
 1b4:	ba 95       	dec	r27
 1b6:	c9 f7       	brne	.-14     	; 0x1aa <__fixunssfsi+0x14>
 1b8:	14 c0       	rjmp	.+40     	; 0x1e2 <__fixunssfsi+0x4c>
 1ba:	b1 30       	cpi	r27, 0x01	; 1
 1bc:	91 f0       	breq	.+36     	; 0x1e2 <__fixunssfsi+0x4c>
 1be:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__fp_zero>
 1c2:	b1 e0       	ldi	r27, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__fp_zero>
 1ca:	67 2f       	mov	r22, r23
 1cc:	78 2f       	mov	r23, r24
 1ce:	88 27       	eor	r24, r24
 1d0:	b8 5f       	subi	r27, 0xF8	; 248
 1d2:	39 f0       	breq	.+14     	; 0x1e2 <__fixunssfsi+0x4c>
 1d4:	b9 3f       	cpi	r27, 0xF9	; 249
 1d6:	cc f3       	brlt	.-14     	; 0x1ca <__fixunssfsi+0x34>
 1d8:	86 95       	lsr	r24
 1da:	77 95       	ror	r23
 1dc:	67 95       	ror	r22
 1de:	b3 95       	inc	r27
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__fixunssfsi+0x42>
 1e2:	3e f4       	brtc	.+14     	; 0x1f2 <__fixunssfsi+0x5c>
 1e4:	90 95       	com	r25
 1e6:	80 95       	com	r24
 1e8:	70 95       	com	r23
 1ea:	61 95       	neg	r22
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	8f 4f       	sbci	r24, 0xFF	; 255
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	08 95       	ret

000001f4 <__floatunsisf>:
 1f4:	e8 94       	clt
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <__floatsisf+0x12>

000001f8 <__floatsisf>:
 1f8:	97 fb       	bst	r25, 7
 1fa:	3e f4       	brtc	.+14     	; 0x20a <__floatsisf+0x12>
 1fc:	90 95       	com	r25
 1fe:	80 95       	com	r24
 200:	70 95       	com	r23
 202:	61 95       	neg	r22
 204:	7f 4f       	sbci	r23, 0xFF	; 255
 206:	8f 4f       	sbci	r24, 0xFF	; 255
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	99 23       	and	r25, r25
 20c:	a9 f0       	breq	.+42     	; 0x238 <__floatsisf+0x40>
 20e:	f9 2f       	mov	r31, r25
 210:	96 e9       	ldi	r25, 0x96	; 150
 212:	bb 27       	eor	r27, r27
 214:	93 95       	inc	r25
 216:	f6 95       	lsr	r31
 218:	87 95       	ror	r24
 21a:	77 95       	ror	r23
 21c:	67 95       	ror	r22
 21e:	b7 95       	ror	r27
 220:	f1 11       	cpse	r31, r1
 222:	f8 cf       	rjmp	.-16     	; 0x214 <__floatsisf+0x1c>
 224:	fa f4       	brpl	.+62     	; 0x264 <__floatsisf+0x6c>
 226:	bb 0f       	add	r27, r27
 228:	11 f4       	brne	.+4      	; 0x22e <__floatsisf+0x36>
 22a:	60 ff       	sbrs	r22, 0
 22c:	1b c0       	rjmp	.+54     	; 0x264 <__floatsisf+0x6c>
 22e:	6f 5f       	subi	r22, 0xFF	; 255
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	8f 4f       	sbci	r24, 0xFF	; 255
 234:	9f 4f       	sbci	r25, 0xFF	; 255
 236:	16 c0       	rjmp	.+44     	; 0x264 <__floatsisf+0x6c>
 238:	88 23       	and	r24, r24
 23a:	11 f0       	breq	.+4      	; 0x240 <__floatsisf+0x48>
 23c:	96 e9       	ldi	r25, 0x96	; 150
 23e:	11 c0       	rjmp	.+34     	; 0x262 <__floatsisf+0x6a>
 240:	77 23       	and	r23, r23
 242:	21 f0       	breq	.+8      	; 0x24c <__floatsisf+0x54>
 244:	9e e8       	ldi	r25, 0x8E	; 142
 246:	87 2f       	mov	r24, r23
 248:	76 2f       	mov	r23, r22
 24a:	05 c0       	rjmp	.+10     	; 0x256 <__floatsisf+0x5e>
 24c:	66 23       	and	r22, r22
 24e:	71 f0       	breq	.+28     	; 0x26c <__floatsisf+0x74>
 250:	96 e8       	ldi	r25, 0x86	; 134
 252:	86 2f       	mov	r24, r22
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	2a f0       	brmi	.+10     	; 0x264 <__floatsisf+0x6c>
 25a:	9a 95       	dec	r25
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	88 1f       	adc	r24, r24
 262:	da f7       	brpl	.-10     	; 0x25a <__floatsisf+0x62>
 264:	88 0f       	add	r24, r24
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	97 f9       	bld	r25, 7
 26c:	08 95       	ret

0000026e <__fp_split3>:
 26e:	57 fd       	sbrc	r21, 7
 270:	90 58       	subi	r25, 0x80	; 128
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	59 f0       	breq	.+22     	; 0x28e <__fp_splitA+0x10>
 278:	5f 3f       	cpi	r21, 0xFF	; 255
 27a:	71 f0       	breq	.+28     	; 0x298 <__fp_splitA+0x1a>
 27c:	47 95       	ror	r20

0000027e <__fp_splitA>:
 27e:	88 0f       	add	r24, r24
 280:	97 fb       	bst	r25, 7
 282:	99 1f       	adc	r25, r25
 284:	61 f0       	breq	.+24     	; 0x29e <__fp_splitA+0x20>
 286:	9f 3f       	cpi	r25, 0xFF	; 255
 288:	79 f0       	breq	.+30     	; 0x2a8 <__fp_splitA+0x2a>
 28a:	87 95       	ror	r24
 28c:	08 95       	ret
 28e:	12 16       	cp	r1, r18
 290:	13 06       	cpc	r1, r19
 292:	14 06       	cpc	r1, r20
 294:	55 1f       	adc	r21, r21
 296:	f2 cf       	rjmp	.-28     	; 0x27c <__fp_split3+0xe>
 298:	46 95       	lsr	r20
 29a:	f1 df       	rcall	.-30     	; 0x27e <__fp_splitA>
 29c:	08 c0       	rjmp	.+16     	; 0x2ae <__fp_splitA+0x30>
 29e:	16 16       	cp	r1, r22
 2a0:	17 06       	cpc	r1, r23
 2a2:	18 06       	cpc	r1, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	f1 cf       	rjmp	.-30     	; 0x28a <__fp_splitA+0xc>
 2a8:	86 95       	lsr	r24
 2aa:	71 05       	cpc	r23, r1
 2ac:	61 05       	cpc	r22, r1
 2ae:	08 94       	sec
 2b0:	08 95       	ret

000002b2 <__fp_zero>:
 2b2:	e8 94       	clt

000002b4 <__fp_szero>:
 2b4:	bb 27       	eor	r27, r27
 2b6:	66 27       	eor	r22, r22
 2b8:	77 27       	eor	r23, r23
 2ba:	cb 01       	movw	r24, r22
 2bc:	97 f9       	bld	r25, 7
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
